package com.itstep.homework.task;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * homework 04
 *
 * @author kaa
 * @version 1.1
 *
 * @see "https://metanit.com/java/tutorial/5.1.php"
 * @see "https://metanit.com/java/tutorial/5.2.php"
 * @see "https://metanit.com/java/tutorial/5.3.php"
 * @see "https://metanit.com/java/tutorial/5.4.php"
 * @see "https://metanit.com/java/tutorial/5.6.php"
 * @see "https://metanit.com/java/tutorial/5.7.php"
 * @see "https://metanit.com/java/tutorial/5.8.php"
 * @see "https://metanit.com/java/tutorial/10.1.php"
 */
public class Homework {

    /**
     * создай коллекцию, добавь в нее 3 элемента + вывод
     */
    public void task1() {
        // твой код: start

        // твой код: end
    }

    /**
     * создай коллекцию, добавь в нее 3 элемента + вывод<br>
     * 3 строки кода
     */
    public void task2() {
        // твой код: start

        // твой код: end
    }

    /**
     * создай две коллекции, объедени их
     */
    public void task3() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть коллекция, необходимо ее отсортировать, затем выбрать из нее первые 10 элементов
     * важно понимать, что заранее никогда неизвестно сколько элементов может быть в этой коллекции-доноре
     */
    public void task4() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть коллекция, удали в ней первые 6 элементов<br>
     * варианты:
     * 1 - циклы (максимум 3 строки кода)
     * 2 - вспоминаем логику/ветвления (1 строка кода)
     * 3 - модернизируем первый вариант (1 строка кода)
     * 4 - пропускаем первые 6 элементов (1 строка кода (StreamApi))
     */
    public void task5() {
        List<String> list = new ArrayList<>();
        Collections.addAll(
                list, "1 e", "2 e", "3 e", "4 e", "5 e", "6 e", "7 e"
        );
        System.out.println("--- before ---");
        list.forEach(System.out::println);
        System.out.println("--- after ----");
        // твой код: start

        // твой код: end
        list.forEach(System.out::println);
    }

    /**
     * у тебя есть коллекция строк<br>
     * необходимо выяснить содержит ли коллекция строку "bbb" и выяснить ее индекс, затем удалить по индексу
     */
    public void task6() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть коллекция строк, выясни, есть ли в ней строки "bbb" и замени ее на "zzz"
     */
    public void task7() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть коллекция строк, выясни, есть ли в ней строки "bbb" и "ccc" и оставь в коллеции только их
     */
    public void task8() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть коллекция в которой некоторые элементы повторяются<br>
     * 1, 1, 2, 3, 3, 3, 4, 2, 5, 6, 7, 7, 8<br>
     * необходимо избавится от дубликатов
     */
    public void task9() {
        // твой код: start

        // твой код: end
    }

    /**
     * тоже самое, но другим способом
     */
    public void task10() {
        // твой код: start

        // твой код: end
    }

    /**
     * тоже самое, но без применения других типов коллекций, потомков Collection
     */
    public void task11() {
        // твой код: start

        // твой код: end
    }

    /**
     * тоже самое, но с применением StreamApi
     */
    public void task12() {
        // твой код: start

        // твой код: end
    }

    /**
     * тоже самое, но с применением StreamApi
     */
    public void task13() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть массив строк<br>
     * преобразуй его в отсортированную коллекцию и избавься от дубликатов<br>
     * и получи новый массив
     */
    public void task14() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть коллекция котов<br>
     * перебери всех котов, увеличивая возраст каждого на 1 год<br>
     * модель кота создай в пакете model
     */
    public void task15() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть коллекция котов(1)<br>
     * но при этом, у каждого кота(1) есть как минимум один хозяин(2) (ну он считает себя хозяином)<br>
     * а у каждого хозяина(2), есть один свой дом(3) с адресом<br>
     * необходимо вывести все объекты третьего уровня<br>
     * идеальным вариантом будет решение в одну строку
     */
    public void task16() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть коллекция человек, нужно выяснить, есть ли из них хотя-бы один по имени Том (можно Джерри)
     */
    public void task17() {
        // твой код: start

        // твой код: end
    }

    /**
     * тоже самое, только одной строкой кода
     */
    public void task18() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть коллекция человек, нужно выделить в отдельную коллекцию тех, кто старше 21 года
     */
    public void task19() {
        // твой код: start

        // твой код: end
    }

    /**
     * тоже самое, но одной строкой кода
     */
    public void task20() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть коллекция человек, как минимум 15, необходимо отсортировать их<br>
     * по фамилии, имени и отчеству<br>
     * заметь, результат должен быть один, для вспомогательных классов сортировки нужно создать свой пакет<br>
     * идеальным решением будет сортировка в одну строку
     */
    public void task21() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть коллекция из предыдущего задания, выясните сколько в ней полных тезок<br>
     * затем, при помощи карт, избавься от них оставив уникальных
     */
    public void task22() {
        // твой код: start

        // твой код: end
    }

    /**
     * необходимо добавить в карту элемент только в том случае, если его там нет
     */
    public void task23() {
        // твой код: start

        // твой код: end
    }

    /**
     * иногда надо выяснить, есть ли в карте указанный ключ<br>
     * а есть ли значение? (и только значение когда у тебя нет ключа)
     */
    public void task24() {
        // твой код: start

        // твой код: end
    }

    /**
     * у тебя есть карта<br>
     * где в качестве ключа используется имя человека<br>
     * а в качестве значения - объект человека<br>
     * если мы не находим по имени человека, нам нужно вернуть пустой объект<br>
     * null возвращать нельзя
     */
    public void task25() {
        // твой код: start

        // твой код: end
    }

    /**
     * попробуй создать TreeSet с какими-нибудь бибизянами или единорогами, сортировку сделай по любому полю
     * при помощи Comparable
     */
    public void task26() {
        // твой код: start

        // твой код: end
    }

    /**
     * попробуй создать TreeSet с какими-нибудь бибизянами или единорогами, сортировку сделай по любому полю
     * при помощи Comparator
     */
    public void task27() {
        // твой код: start

        // твой код: end
    }

    /**
     * создай карту, содержащую пары значений  - имя игрушки и объект игрушки<br>
     * перебери и распечатай пары значений<br>
     * перебери и расспечатай набор имен<br>
     * перебери и распечатай объекты игрушек
     */
    public void task28() {
        // твой код: start

        // твой код: end
    }

    /**
     * приведи пример любых манипуляций с очередью типа lifo
     */
    public void task29() {
        // твой код: start

        // твой код: end
    }

    /**
     * приведи пример любых манипуляций с очередью типа fifo
     */
    public void task30() {
        // твой код: start

        // твой код: end
    }

    /**
     * при манипуляции с очередью, необходимо забирать элементы из нее таким образом<br>
     * чтобы они были автоматически удалены после выборки
     */
    public void task31() {
        // твой код: start

        // твой код: end
    }

    //--- задания с плюсиком -------------------------------------------------------------------------------------------

    /**
     * у тебя есть коллекция студентов<br>
     * у каждого из них есть поле содержащее число - курс<br>
     * у каждого студента есть список оценок<br>
     * необходимо "перевести" на следующий курс всех студентов, у которых средний бал выше 3<br>
     * остальных надо исключить из состава группы
     */
    public void task32() {
        // твой код: start

        // твой код: end
    }

    /**
     * попробуй собрать карту из строки, при помощи операции в одну строку кода<br>
     * разделитель между ключом и значением - :<br>
     * разделитель между парами - ;
     */
    public void task33() {
        String stringBuilder = IntStream
                .rangeClosed(0, 999)
                .mapToObj(i -> i <= 10 ? "00" + i : i < 100 ? "0" + i : "" + i)
                .map(counter -> "k" + counter + ":" + "v" + counter + ";")
                .collect(Collectors.joining());
        // твой код: start
        System.out.println(stringBuilder); // удали эту строку кода, она нужна для просмотра вида строки

        // твой код: end
    }
}
